# -*- coding: utf-8 -*-
"""AugmentasiCitra.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BCp1fJaELaYfPCQXp7RI1MMhMEqWDrTq

**1. Import Library**
"""

import cv2
import os
import numpy as np
from pathlib import Path

"""**2. Parameters**"""

input_dir = 'dataset'
output_dir = 'dataset/augmented'
angle = 45
# zoom_factor = 1.2

"""**3. Augmentation Functions**"""

# Rotate
def rotate(image, angle):
    h, w = image.shape[:2]
    M = cv2.getRotationMatrix2D((w / 2, h / 2), angle, 1)
    return cv2.warpAffine(image, M, (w, h))

# flip
def flip_h(image):
    return cv2.flip(image, 1)
def flip_v(image):
    return cv2.flip(image, 0)

# translate
def translate(image, x = 10, y = 10):
    h, w = image.shape[:2]
    M = np.float32([[1, 0, x], [0, 1, y]])
    return cv2.warpAffine(image, M, (w, h))

# brightness
def brightness(image, factor):
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
    hsv = np.array(hsv, dtype=np.float64)
    hsv[:, :, 2] *= factor
    hsv[:, :, 2][hsv[:, :, 2] > 255] = 255
    hsv = np.array(hsv, dtype=np.uint8)
    return cv2.cvtColor(hsv, cv2.COLOR_HSV2BGR)

# zoom
def zoom(image, factor):
    h, w = image.shape[:2]
    if factor > 1:  # Zoom in
        new_h, new_w = int(h * factor), int(w * factor)
        image_res = cv2.resize(image, (new_w, new_h), interpolation=cv2.INTER_LINEAR)
        y1 = (new_h - h) // 2
        x1 = (new_w - w) // 2
        return image_res[y1:y1 + h, x1:x1 + w]
    elif factor < 1:  # Zoom out
        new_h, new_w = int(h * factor), int(w * factor)
        image_res = cv2.resize(image, (new_w, new_h), interpolation=cv2.INTER_LINEAR)
        top = (h - new_h) // 2
        bottom = h - new_h - top
        left = (w - new_w) // 2
        right = w - new_w - left
        return cv2.copyMakeBorder(image_res, top, bottom, left, right, cv2.BORDER_CONSTANT, value=[0, 0, 0])
    else:  # No zoom
        return image

# blur
def blur(image):
    return cv2.GaussianBlur(image, (5, 5), 0)

"""**4. Augmentation Pipeline**"""

def augment_image(image_path, label, food_type, image_name):
    image = cv2.imread(image_path)
    if image is None:
        print(f"Error reading image: {image_path}")
        return

    base_output = Path(output_dir) / label / food_type
    base_output.mkdir(parents=True, exist_ok=True)

    # Augmentations
    augments = {
        "rot_plus": rotate(image, angle),
        "rot_minus": rotate(image, -angle),
        "flip_h": flip_h(image),
        "flip_v": flip_v(image),
        "bright_plus": brightness(image, 1.5),
        "bright_minus": brightness(image, 0.5),
        "translate": translate(image, 10, 10),
        "zoom_plus": zoom(image, 2),
        "zoom_minus": zoom(image, 0.5),
        "blur": blur(image),
    }

    for augment_name, augmented_image in augments.items():
        output_path = base_output / f"{image_name}_{augment_name}.jpg"
        cv2.imwrite(str(output_path), augmented_image)

"""**5. Main**"""

for label in ['fresh', 'rotten']:
    label_path = Path(input_dir) / label
    for food_type in os.listdir(label_path):
        food_type_path = label_path / food_type
        for image_file in os.listdir(food_type_path):
            image_path = food_type_path / image_file
            image_name = Path(image_file).stem
            augment_image(image_path, label, food_type, image_name)

print("Augmentation completed.")